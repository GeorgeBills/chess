AWSTemplateFormatVersion: "2010-09-09"
Description: Infrastructure for the Lichess bot.

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: lichess-bot
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # allow SES to write emails to bucket /emails/
          # https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html#receiving-email-permissions-s3
          - Effect: Allow
            Principal:
              Service: "ses.amazonaws.com"
            Action: s3:PutObject
            Resource: !Sub "${S3Bucket.Arn}/emails/*"
            Condition:
              StringEquals:
                aws:Referer: !Ref AWS::AccountId

  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: lichess-bot

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lichess-bot-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: access-api-token-param
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ssm:GetParameters
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lichess-bot/*"

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.68.131.0/24"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 4, 6]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 4, 6]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # PrivateSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 4, 6]]
  #     AvailabilityZone: !Select [0, !GetAZs ""]
  #     MapPublicIpOnLaunch: true

  # PrivateSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 4, 6]]
  #     AvailabilityZone: !Select [1, !GetAZs ""]
  #     MapPublicIpOnLaunch: true

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "No ingress."
      VpcId: !Ref VPC

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: lichess-bot-cluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: lichess-bot-logs
      RetentionInDays: 30

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: lichess-bot
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/lichess-bot:latest"
          ReadonlyRootFilesystem: true

          # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html
          LogConfiguration:
            LogDriver: awslogs
            Options:
              "awslogs-group": !Ref LogGroup
              "awslogs-region": !Ref AWS::Region
              "awslogs-stream-prefix": "lichess-bot"

          # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html
          Secrets:
            - Name: TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lichess-bot/api-token"
      Cpu: 1024 # 1 vCPU
      Family: lichess-bot
      Memory: 2048 # 2Gb
      NetworkMode: awsvpc # required for fargate
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ExecutionRole
      # TaskRoleArn: # will need a task role for S3 Syzygy download, metadata poll for spot termination
      # Volumes: # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-task-storage.html

Outputs:
  Repository:
    Value: !GetAtt Repository.Arn
